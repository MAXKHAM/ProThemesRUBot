import os
import logging
import json
import asyncio
from typing import Dict, List, Optional, Any
from datetime import datetime, timedelta
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, InputMediaPhoto, InputMediaDocument
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    CallbackQueryHandler,
    ContextTypes,
    filters,
    ConversationHandler,
)
from telegram.constants import ParseMode
from dotenv import load_dotenv
import requests
import aiohttp
from PIL import Image
import io

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO,
    handlers=[
        logging.FileHandler('telegram_bot.log'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞
SELECTING_ACTION, TEMPLATES, CUSTOMIZATION, ORDER, PAYMENT, FEEDBACK = range(6)

# –ö–Ω–æ–ø–∫–∏ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
MAIN_MENU = [
    [
        InlineKeyboardButton("üìö –®–∞–±–ª–æ–Ω—ã", callback_data='templates'),
        InlineKeyboardButton("üé® –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä", callback_data='customization'),
    ],
    [
        InlineKeyboardButton("üì¶ –ó–∞–∫–∞–∑–∞—Ç—å", callback_data='order'),
        InlineKeyboardButton("üí∞ –¶–µ–Ω—ã", callback_data='pricing'),
    ],
    [
        InlineKeyboardButton("‚ùì –ü–æ–º–æ—â—å", callback_data='help'),
        InlineKeyboardButton("üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã", callback_data='contacts'),
    ],
]

# API –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
API_BASE_URL = os.getenv('API_BASE_URL', 'http://localhost:5000')
TELEGRAM_TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')
ADMIN_CHAT_ID = os.getenv('TELEGRAM_ADMIN_CHAT_ID')

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å Redis/DB)
user_data = {}

class TemplateManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —à–∞–±–ª–æ–Ω–∞–º–∏"""
    
    def __init__(self):
        self.templates = self._load_templates()
    
    def _load_templates(self) -> List[Dict]:
        """–ó–∞–≥—Ä—É–∑–∫–∞ —à–∞–±–ª–æ–Ω–æ–≤ –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ñ–∞–π–ª–∞"""
        try:
            with open('../design_templates.json', 'r', encoding='utf-8') as f:
                return json.load(f)
        except FileNotFoundError:
            logger.warning("–§–∞–π–ª —à–∞–±–ª–æ–Ω–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ–º–æ-–¥–∞–Ω–Ω—ã–µ")
            return self._get_demo_templates()
    
    def _get_demo_templates(self) -> List[Dict]:
        """–î–µ–º–æ-—à–∞–±–ª–æ–Ω—ã"""
        return [
            {
                "id": 1,
                "name": "–ë–∏–∑–Ω–µ—Å-–ª–µ–Ω–¥–∏–Ω–≥",
                "category": "–ë–∏–∑–Ω–µ—Å",
                "features": ["–ê–¥–∞–ø—Ç–∏–≤–Ω—ã–π –¥–∏–∑–∞–π–Ω", "SEO-–æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è", "–§–æ—Ä–º—ã –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏"],
                "preview_image": "https://via.placeholder.com/300x200/4A90E2/FFFFFF?text=–ë–∏–∑–Ω–µ—Å-–ª–µ–Ω–¥–∏–Ω–≥",
                "price": "5000‚ÇΩ",
                "description": "–°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –ª–µ–Ω–¥–∏–Ω–≥ –¥–ª—è –±–∏–∑–Ω–µ—Å–∞"
            },
            {
                "id": 2,
                "name": "–ü–æ—Ä—Ç—Ñ–æ–ª–∏–æ",
                "category": "–ü–æ—Ä—Ç—Ñ–æ–ª–∏–æ",
                "features": ["–ì–∞–ª–µ—Ä–µ—è —Ä–∞–±–æ—Ç", "–ê–Ω–∏–º–∞—Ü–∏–∏", "–ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è —Ñ–æ—Ä–º–∞"],
                "preview_image": "https://via.placeholder.com/300x200/50C878/FFFFFF?text=–ü–æ—Ä—Ç—Ñ–æ–ª–∏–æ",
                "price": "4000‚ÇΩ",
                "description": "–°—Ç–∏–ª—å–Ω–æ–µ –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ –¥–ª—è —Ç–≤–æ—Ä—á–µ—Å–∫–∏—Ö –ª—é–¥–µ–π"
            },
            {
                "id": 3,
                "name": "–ò–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞–≥–∞–∑–∏–Ω",
                "category": "E-commerce",
                "features": ["–ö–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä–æ–≤", "–ö–æ—Ä–∑–∏–Ω–∞", "–û–Ω–ª–∞–π–Ω-–æ–ø–ª–∞—Ç–∞"],
                "preview_image": "https://via.placeholder.com/300x200/FF6B6B/FFFFFF?text=–ú–∞–≥–∞–∑–∏–Ω",
                "price": "8000‚ÇΩ",
                "description": "–ü–æ–ª–Ω–æ—Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞–≥–∞–∑–∏–Ω"
            }
        ]
    
    def get_templates(self) -> List[Dict]:
        return self.templates
    
    def get_template_by_id(self, template_id: int) -> Optional[Dict]:
        return next((t for t in self.templates if t["id"] == template_id), None)

template_manager = TemplateManager()

class UserManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    
    def __init__(self):
        self.users = {}
    
    def add_user(self, user_id: int, user_data: Dict):
        self.users[user_id] = {
            "id": user_id,
            "created_at": datetime.now(),
            "last_activity": datetime.now(),
            "selected_template": None,
            "customization_data": {},
            "orders": [],
            **user_data
        }
    
    def get_user(self, user_id: int) -> Optional[Dict]:
        return self.users.get(user_id)
    
    def update_user(self, user_id: int, data: Dict):
        if user_id in self.users:
            self.users[user_id].update(data)
            self.users[user_id]["last_activity"] = datetime.now()
    
    def get_user_stats(self) -> Dict:
        total_users = len(self.users)
        active_users = len([u for u in self.users.values() 
                          if (datetime.now() - u["last_activity"]).days < 7])
        return {"total": total_users, "active": active_users}

user_manager = UserManager()

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ù–∞—á–∞–ª–æ –¥–∏–∞–ª–æ–≥–∞"""
    user = update.effective_user
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_manager.add_user(user.id, {
        "first_name": user.first_name,
        "last_name": user.last_name,
        "username": user.username
    })
    
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.first_name} (ID: {user.id}) –Ω–∞—á–∞–ª –¥–∏–∞–ª–æ–≥")
    
    reply_markup = InlineKeyboardMarkup(MAIN_MENU)
    await update.message.reply_text(
        f"–ü—Ä–∏–≤–µ—Ç, {user.first_name}! üåü\n\n"
        "–Ø –ø–æ–º–æ–≥—É –≤–∞–º —Å–æ–∑–¥–∞—Ç—å –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π —Å–∞–π—Ç.\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=reply_markup
    )
    return SELECTING_ACTION

async def show_templates(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü–æ–∫–∞–∑–∞—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ —à–∞–±–ª–æ–Ω—ã"""
    query = update.callback_query
    await query.answer()
    
    templates = template_manager.get_templates()
    
    if not templates:
        await query.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —à–∞–±–ª–æ–Ω–æ–≤")
        return SELECTING_ACTION
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3 —à–∞–±–ª–æ–Ω–∞
    for template in templates[:3]:
        keyboard = [
            [
                InlineKeyboardButton("üëÅÔ∏è –ü—Ä–æ—Å–º–æ—Ç—Ä", callback_data=f'view_{template["id"]}'),
                InlineKeyboardButton("‚úÖ –í—ã–±—Ä–∞—Ç—å", callback_data=f'select_{template["id"]}'),
            ],
            [
                InlineKeyboardButton("üí∞ –¶–µ–Ω–∞: " + template["price"], callback_data=f'price_{template["id"]}'),
            ]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        caption = (
            f"üé® <b>{template['name']}</b>\n"
            f"üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {template['category']}\n"
            f"‚ú® –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏: {', '.join(template['features'])}\n"
            f"üíµ –¶–µ–Ω–∞: {template['price']}\n\n"
            f"üìù {template['description']}"
        )
        
        await query.message.reply_photo(
            photo=template["preview_image"],
            caption=caption,
            reply_markup=reply_markup,
            parse_mode=ParseMode.HTML
        )
    
    # –ö–Ω–æ–ø–∫–∞ "–ü–æ–∫–∞–∑–∞—Ç—å –µ—â–µ"
    if len(templates) > 3:
        keyboard = [
            [InlineKeyboardButton("üìÑ –ü–æ–∫–∞–∑–∞—Ç—å –µ—â–µ", callback_data='more_templates')],
            [InlineKeyboardButton("üîô –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='back_to_main')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.message.reply_text(
            "–ü–æ–∫–∞–∑–∞–Ω—ã –ø–µ—Ä–≤—ã–µ 3 —à–∞–±–ª–æ–Ω–∞. –•–æ—Ç–∏—Ç–µ —É–≤–∏–¥–µ—Ç—å –æ—Å—Ç–∞–ª—å–Ω—ã–µ?",
            reply_markup=reply_markup
        )
    else:
        keyboard = [[InlineKeyboardButton("üîô –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='back_to_main')]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.message.reply_text(
            "–≠—Ç–æ –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —à–∞–±–ª–æ–Ω—ã. –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π!",
            reply_markup=reply_markup
        )
    
    return TEMPLATES

async def view_template(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–î–µ—Ç–∞–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä —à–∞–±–ª–æ–Ω–∞"""
    query = update.callback_query
    await query.answer()
    
    template_id = int(query.data.split('_')[1])
    template = template_manager.get_template_by_id(template_id)
    
    if not template:
        await query.message.reply_text("‚ùå –®–∞–±–ª–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return TEMPLATES
    
    keyboard = [
        [
            InlineKeyboardButton("‚úÖ –í—ã–±—Ä–∞—Ç—å —ç—Ç–æ—Ç —à–∞–±–ª–æ–Ω", callback_data=f'select_{template_id}'),
            InlineKeyboardButton("üí∞ –ó–∞–∫–∞–∑–∞—Ç—å", callback_data=f'order_{template_id}'),
        ],
        [
            InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ —à–∞–±–ª–æ–Ω–∞–º", callback_data='templates'),
            InlineKeyboardButton("üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='back_to_main'),
        ]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    detailed_caption = (
        f"üé® <b>{template['name']}</b>\n\n"
        f"üìÇ <b>–ö–∞—Ç–µ–≥–æ—Ä–∏—è:</b> {template['category']}\n"
        f"üíµ <b>–¶–µ–Ω–∞:</b> {template['price']}\n\n"
        f"‚ú® <b>–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:</b>\n"
        f"{chr(10).join(['‚Ä¢ ' + feature for feature in template['features']])}\n\n"
        f"üìù <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b>\n{template['description']}\n\n"
        f"üöÄ <b>–ß—Ç–æ –≤–∫–ª—é—á–µ–Ω–æ:</b>\n"
        f"‚Ä¢ –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–π –¥–∏–∑–∞–π–Ω\n"
        f"‚Ä¢ SEO-–æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è\n"
        f"‚Ä¢ –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞\n"
        f"‚Ä¢ –û–±—É—á–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–µ —Å —Å–∞–π—Ç–æ–º"
    )
    
    await query.message.reply_photo(
        photo=template["preview_image"],
        caption=detailed_caption,
        reply_markup=reply_markup,
        parse_mode=ParseMode.HTML
    )
    
    return TEMPLATES

async def customize_template(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä —Å–∞–π—Ç–∞"""
    query = update.callback_query
    await query.answer()
    
    keyboard = [
        [
            InlineKeyboardButton("üé® –¶–≤–µ—Ç–æ–≤–∞—è —Å—Ö–µ–º–∞", callback_data='customize_colors'),
            InlineKeyboardButton("üìù –ö–æ–Ω—Ç–µ–Ω—Ç", callback_data='customize_content'),
        ],
        [
            InlineKeyboardButton("üñºÔ∏è –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è", callback_data='customize_images'),
            InlineKeyboardButton("üî§ –®—Ä–∏—Ñ—Ç—ã", callback_data='customize_fonts'),
        ],
        [
            InlineKeyboardButton("üì± –ê–¥–∞–ø—Ç–∏–≤–Ω–æ—Å—Ç—å", callback_data='customize_responsive'),
            InlineKeyboardButton("‚ö° –ê–Ω–∏–º–∞—Ü–∏–∏", callback_data='customize_animations'),
        ],
        [
            InlineKeyboardButton("üëÅÔ∏è –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä", callback_data='preview_site'),
            InlineKeyboardButton("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å", callback_data='save_customization'),
        ],
        [
            InlineKeyboardButton("üîô –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='back_to_main'),
        ],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.message.reply_text(
        "üé® <b>–ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä —Å–∞–π—Ç–∞</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å:\n\n"
        "‚Ä¢ <b>–¶–≤–µ—Ç–æ–≤–∞—è —Å—Ö–µ–º–∞</b> - –∏–∑–º–µ–Ω–∏—Ç–µ —Ü–≤–µ—Ç–∞ —Å–∞–π—Ç–∞\n"
        "‚Ä¢ <b>–ö–æ–Ω—Ç–µ–Ω—Ç</b> - –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ —Ç–µ–∫—Å—Ç—ã –∏ –±–ª–æ–∫–∏\n"
        "‚Ä¢ <b>–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è</b> - –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Å–≤–æ–∏ —Ñ–æ—Ç–æ\n"
        "‚Ä¢ <b>–®—Ä–∏—Ñ—Ç—ã</b> - –≤—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∏–ª—å —Ç–µ–∫—Å—Ç–∞\n"
        "‚Ä¢ <b>–ê–¥–∞–ø—Ç–∏–≤–Ω–æ—Å—Ç—å</b> - –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö\n"
        "‚Ä¢ <b>–ê–Ω–∏–º–∞—Ü–∏–∏</b> - –¥–æ–±–∞–≤—å—Ç–µ —ç—Ñ—Ñ–µ–∫—Ç—ã\n\n"
        "–ü–æ—Å–ª–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ–∂–µ—Ç–µ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç!",
        reply_markup=reply_markup,
        parse_mode=ParseMode.HTML
    )
    return CUSTOMIZATION

async def order_website(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ó–∞–∫–∞–∑ —Å–∞–π—Ç–∞"""
    query = update.callback_query
    await query.answer()
    
    keyboard = [
        [
            InlineKeyboardButton("üöÄ –ë–∞–∑–æ–≤—ã–π (5000‚ÇΩ)", callback_data='order_basic'),
            InlineKeyboardButton("‚≠ê –ü—Ä–æ (8000‚ÇΩ)", callback_data='order_pro'),
        ],
        [
            InlineKeyboardButton("üíé –ü—Ä–µ–º–∏—É–º (15000‚ÇΩ)", callback_data='order_premium'),
            InlineKeyboardButton("üè¢ –ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–π (25000‚ÇΩ)", callback_data='order_corporate'),
        ],
        [
            InlineKeyboardButton("üîô –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='back_to_main'),
        ],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.message.reply_text(
        "üì¶ <b>–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ–Ω—ã–π –ø–ª–∞–Ω:</b>\n\n"
        "üöÄ <b>–ë–∞–∑–æ–≤—ã–π (5000‚ÇΩ)</b>\n"
        "‚Ä¢ 1-2 —Å—Ç—Ä–∞–Ω–∏—Ü—ã\n"
        "‚Ä¢ –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–π –¥–∏–∑–∞–π–Ω\n"
        "‚Ä¢ –ë–∞–∑–æ–≤–∞—è SEO-–æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è\n"
        "‚Ä¢ –°—Ä–æ–∫: 3-5 –¥–Ω–µ–π\n\n"
        "‚≠ê <b>–ü—Ä–æ (8000‚ÇΩ)</b>\n"
        "‚Ä¢ 3-5 —Å—Ç—Ä–∞–Ω–∏—Ü\n"
        "‚Ä¢ –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π –¥–∏–∑–∞–π–Ω\n"
        "‚Ä¢ –§–æ—Ä–º—ã –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏\n"
        "‚Ä¢ –°—Ä–æ–∫: 5-7 –¥–Ω–µ–π\n\n"
        "üíé <b>–ü—Ä–µ–º–∏—É–º (15000‚ÇΩ)</b>\n"
        "‚Ä¢ 5-10 —Å—Ç—Ä–∞–Ω–∏—Ü\n"
        "‚Ä¢ –£–Ω–∏–∫–∞–ª—å–Ω—ã–π –¥–∏–∑–∞–π–Ω\n"
        "‚Ä¢ –ê–Ω–∏–º–∞—Ü–∏–∏ –∏ —ç—Ñ—Ñ–µ–∫—Ç—ã\n"
        "‚Ä¢ –°—Ä–æ–∫: 7-10 –¥–Ω–µ–π\n\n"
        "üè¢ <b>–ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–π (25000‚ÇΩ)</b>\n"
        "‚Ä¢ –ù–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü\n"
        "‚Ä¢ –ü–æ–ª–Ω–∞—è –∫–∞—Å—Ç–æ–º–∏–∑–∞—Ü–∏—è\n"
        "‚Ä¢ –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞ 24/7\n"
        "‚Ä¢ –°—Ä–æ–∫: 10-14 –¥–Ω–µ–π",
        reply_markup=reply_markup,
        parse_mode=ParseMode.HTML
    )
    return ORDER

async def show_pricing(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü–æ–∫–∞–∑–∞—Ç—å —Ü–µ–Ω—ã"""
    query = update.callback_query
    await query.answer()
    
    keyboard = [
        [
            InlineKeyboardButton("üì¶ –ó–∞–∫–∞–∑–∞—Ç—å", callback_data='order'),
            InlineKeyboardButton("üí¨ –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è", callback_data='consultation'),
        ],
        [
            InlineKeyboardButton("üîô –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='back_to_main'),
        ],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.message.reply_text(
        "üí∞ <b>–ù–∞—à–∏ —Ü–µ–Ω—ã</b>\n\n"
        "üöÄ <b>–ë–∞–∑–æ–≤—ã–π –ø–∞–∫–µ—Ç - 5000‚ÇΩ</b>\n"
        "‚Ä¢ –õ–µ–Ω–¥–∏–Ω–≥-—Å—Ç—Ä–∞–Ω–∏—Ü–∞\n"
        "‚Ä¢ –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–π –¥–∏–∑–∞–π–Ω\n"
        "‚Ä¢ –ë–∞–∑–æ–≤–∞—è SEO-–æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è\n"
        "‚Ä¢ 1 –º–µ—Å—è—Ü –ø–æ–¥–¥–µ—Ä–∂–∫–∏\n\n"
        "‚≠ê <b>–ü—Ä–æ –ø–∞–∫–µ—Ç - 8000‚ÇΩ</b>\n"
        "‚Ä¢ –ú–Ω–æ–≥–æ—Å—Ç—Ä–∞–Ω–∏—á–Ω—ã–π —Å–∞–π—Ç\n"
        "‚Ä¢ –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π –¥–∏–∑–∞–π–Ω\n"
        "‚Ä¢ –§–æ—Ä–º—ã –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏\n"
        "‚Ä¢ 3 –º–µ—Å—è—Ü–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏\n\n"
        "üíé <b>–ü—Ä–µ–º–∏—É–º –ø–∞–∫–µ—Ç - 15000‚ÇΩ</b>\n"
        "‚Ä¢ –ü–æ–ª–Ω–æ—Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π —Å–∞–π—Ç\n"
        "‚Ä¢ –£–Ω–∏–∫–∞–ª—å–Ω—ã–π –¥–∏–∑–∞–π–Ω\n"
        "‚Ä¢ –ê–Ω–∏–º–∞—Ü–∏–∏ –∏ —ç—Ñ—Ñ–µ–∫—Ç—ã\n"
        "‚Ä¢ 6 –º–µ—Å—è—Ü–µ–≤ –ø–æ–¥–¥–µ—Ä–∂–∫–∏\n\n"
        "üè¢ <b>–ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–π - –æ—Ç 25000‚ÇΩ</b>\n"
        "‚Ä¢ –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–∞—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞\n"
        "‚Ä¢ –ü–æ–ª–Ω–∞—è –∫–∞—Å—Ç–æ–º–∏–∑–∞—Ü–∏—è\n"
        "‚Ä¢ –¢–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞ 24/7\n"
        "‚Ä¢ 12 –º–µ—Å—è—Ü–µ–≤ –ø–æ–¥–¥–µ—Ä–∂–∫–∏\n\n"
        "üí° <b>–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —É—Å–ª—É–≥–∏:</b>\n"
        "‚Ä¢ SEO-–ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏–µ: –æ—Ç 5000‚ÇΩ/–º–µ—Å\n"
        "‚Ä¢ –¢–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞: –æ—Ç 2000‚ÇΩ/–º–µ—Å\n"
        "‚Ä¢ –û–±–Ω–æ–≤–ª–µ–Ω–∏—è: –æ—Ç 1000‚ÇΩ/–º–µ—Å",
        reply_markup=reply_markup,
        parse_mode=ParseMode.HTML
    )
    return SELECTING_ACTION

async def show_help(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–º–æ—â—å"""
    query = update.callback_query
    await query.answer()
    
    keyboard = [
        [
            InlineKeyboardButton("üìû –°–≤—è–∑–∞—Ç—å—Å—è —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π", callback_data='support'),
            InlineKeyboardButton("üìß –ù–∞–ø–∏—Å–∞—Ç—å –Ω–∞ email", callback_data='email_support'),
        ],
        [
            InlineKeyboardButton("üîô –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='back_to_main'),
        ],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.message.reply_text(
        "‚ùì <b>–ü–æ–º–æ—â—å –∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∞</b>\n\n"
        "ü§ñ <b>–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º:</b>\n"
        "1. –í—ã–±–µ—Ä–∏—Ç–µ —à–∞–±–ª–æ–Ω –∏–∑ –∫–∞—Ç–∞–ª–æ–≥–∞\n"
        "2. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –µ–≥–æ –ø–æ–¥ —Å–≤–æ–∏ –Ω—É–∂–¥—ã\n"
        "3. –ó–∞–∫–∞–∂–∏—Ç–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫—É\n"
        "4. –ü–æ–ª—É—á–∏—Ç–µ –≥–æ—Ç–æ–≤—ã–π —Å–∞–π—Ç\n\n"
        "üìû <b>–°–≤—è–∑–∞—Ç—å—Å—è —Å –Ω–∞–º–∏:</b>\n"
        "‚Ä¢ Telegram: @prothemes_support\n"
        "‚Ä¢ Email: support@prothemes.ru\n"
        "‚Ä¢ –¢–µ–ª–µ—Ñ–æ–Ω: +7 (999) 123-45-67\n\n"
        "‚è∞ <b>–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã:</b>\n"
        "–ü–Ω-–ü—Ç: 9:00 - 18:00 (–ú–°–ö)\n"
        "–°–±-–í—Å: 10:00 - 16:00 (–ú–°–ö)\n\n"
        "üí° <b>–ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã:</b>\n"
        "‚Ä¢ –°–∫–æ–ª—å–∫–æ –≤—Ä–µ–º–µ–Ω–∏ –∑–∞–Ω–∏–º–∞–µ—Ç —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞?\n"
        "‚Ä¢ –ú–æ–∂–Ω–æ –ª–∏ –∏–∑–º–µ–Ω–∏—Ç—å –¥–∏–∑–∞–π–Ω –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã?\n"
        "‚Ä¢ –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç–µ –ª–∏ –≤—ã —Ö–æ—Å—Ç–∏–Ω–≥?\n"
        "‚Ä¢ –ï—Å—Ç—å –ª–∏ –≥–∞—Ä–∞–Ω—Ç–∏—è –Ω–∞ —Ä–∞–±–æ—Ç—É —Å–∞–π—Ç–∞?",
        reply_markup=reply_markup,
        parse_mode=ParseMode.HTML
    )
    return SELECTING_ACTION

async def show_contacts(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü–æ–∫–∞–∑–∞—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç—ã"""
    query = update.callback_query
    await query.answer()
    
    keyboard = [
        [
            InlineKeyboardButton("üìû –ü–æ–∑–≤–æ–Ω–∏—Ç—å", callback_data='call_us'),
            InlineKeyboardButton("üí¨ –ù–∞–ø–∏—Å–∞—Ç—å –≤ Telegram", callback_data='telegram_contact'),
        ],
        [
            InlineKeyboardButton("üìß Email", callback_data='email_contact'),
            InlineKeyboardButton("üåê –ù–∞—à —Å–∞–π—Ç", callback_data='website'),
        ],
        [
            InlineKeyboardButton("üîô –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='back_to_main'),
        ],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.message.reply_text(
        "üìû <b>–ù–∞—à–∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã</b>\n\n"
        "üè¢ <b>ProThemesRU</b>\n"
        "–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã—Ö —Å–∞–π—Ç–æ–≤\n\n"
        "üì± <b>Telegram:</b> @prothemes_support\n"
        "üìß <b>Email:</b> info@prothemes.ru\n"
        "üìû <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> +7 (999) 123-45-67\n"
        "üåê <b>–°–∞–π—Ç:</b> https://prothemes.ru\n\n"
        "üìç <b>–ê–¥—Ä–µ—Å:</b>\n"
        "–≥. –ú–æ—Å–∫–≤–∞, —É–ª. –ü—Ä–∏–º–µ—Ä–Ω–∞—è, –¥. 123\n"
        "–ë–∏–∑–Ω–µ—Å-—Ü–µ–Ω—Ç—Ä "–¢–µ—Ö–Ω–æ–ø–∞—Ä–∫"\n\n"
        "‚è∞ <b>–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã:</b>\n"
        "–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ - –ü—è—Ç–Ω–∏—Ü–∞: 9:00 - 18:00\n"
        "–°—É–±–±–æ—Ç–∞: 10:00 - 16:00\n"
        "–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ: –≤—ã—Ö–æ–¥–Ω–æ–π\n\n"
        "üí¨ <b>–û–Ω–ª–∞–π–Ω-–∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏:</b>\n"
        "–ö—Ä—É–≥–ª–æ—Å—É—Ç–æ—á–Ω–æ —á–µ—Ä–µ–∑ –±–æ—Ç–∞",
        reply_markup=reply_markup,
        parse_mode=ParseMode.HTML
    )
    return SELECTING_ACTION

async def back_to_main(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    query = update.callback_query
    await query.answer()
    
    reply_markup = InlineKeyboardMarkup(MAIN_MENU)
    await query.message.reply_text(
        "üè† <b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=reply_markup,
        parse_mode=ParseMode.HTML
    )
    return SELECTING_ACTION

async def error_handler(update: object, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫"""
    logger.error(msg="–û—à–∏–±–∫–∞:", exc_info=context.error)
    
    if isinstance(update, Update):
        await update.effective_message.reply_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É."
        )

async def send_admin_notification(message: str):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É"""
    if ADMIN_CHAT_ID:
        try:
            async with aiohttp.ClientSession() as session:
                async with session.post(
                    f"https://api.telegram.org/bot{TELEGRAM_TOKEN}/sendMessage",
                    json={
                        "chat_id": ADMIN_CHAT_ID,
                        "text": f"üîî {message}",
                        "parse_mode": "HTML"
                    }
                ) as response:
                    if response.status != 200:
                        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω—É: {response.status}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω—É: {e}")

def main() -> None:
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    if not TELEGRAM_TOKEN:
        logger.error("TELEGRAM_BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
        return
    
    application = Application.builder().token(TELEGRAM_TOKEN).build()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            SELECTING_ACTION: [
                CallbackQueryHandler(show_templates, pattern='^templates$'),
                CallbackQueryHandler(customize_template, pattern='^customization$'),
                CallbackQueryHandler(order_website, pattern='^order$'),
                CallbackQueryHandler(show_pricing, pattern='^pricing$'),
                CallbackQueryHandler(show_help, pattern='^help$'),
                CallbackQueryHandler(show_contacts, pattern='^contacts$'),
            ],
            TEMPLATES: [
                CallbackQueryHandler(view_template, pattern='^view_\d+$'),
                CallbackQueryHandler(show_templates, pattern='^templates$'),
                CallbackQueryHandler(back_to_main, pattern='^back_to_main$'),
            ],
            CUSTOMIZATION: [
                CallbackQueryHandler(customize_template, pattern='^customize_'),
                CallbackQueryHandler(back_to_main, pattern='^back_to_main$'),
            ],
            ORDER: [
                CallbackQueryHandler(order_website, pattern='^order_'),
                CallbackQueryHandler(back_to_main, pattern='^back_to_main$'),
            ],
        },
        fallbacks=[CommandHandler("start", start)],
    )
    
    application.add_handler(conv_handler)
    application.add_error_handler(error_handler)
    
    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    logger.info("–ó–∞–ø—É—Å–∫ —Ç–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç–∞...")
    application.run_polling(allowed_updates=Update.ALL_TYPES)

if __name__ == '__main__':
    main()