import os
import logging
from dotenv import load_dotenv
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes

load_dotenv()

logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

TOKEN = os.getenv('TELEGRAM_TOKEN')
ADMIN_CHAT_ID = os.getenv('ADMIN_CHAT_ID')
if not TOKEN:
    logger.error("TELEGRAM_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
    raise ValueError("TELEGRAM_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
if not ADMIN_CHAT_ID:
    logger.error("ADMIN_CHAT_ID –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
    raise ValueError("ADMIN_CHAT_ID –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")

keyboard = ReplyKeyboardMarkup([['–ó–∞–∫–∞–∑', '–¶–µ–Ω—ã']], resize_keyboard=True)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    await update.message.reply_text(
        f'–ü—Ä–∏–≤–µ—Ç, {user.first_name}! –Ø –±–æ—Ç ProThemesRU. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:',
        reply_markup=keyboard
    )

async def prices(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üí∞ –ù–∞—à–∏ —Ü–µ–Ω—ã:\n\n"
        "- –ü—Ä–æ—Å—Ç–∞—è —Ç–µ–º–∞: 500 —Ä—É–±.\n"
        "- –¢–µ–º–∞ —Å—Ä–µ–¥–Ω–µ–π —Å–ª–æ–∂–Ω–æ—Å—Ç–∏: 1000 —Ä—É–±.\n"
        "- –°–ª–æ–∂–Ω–∞—è —Ç–µ–º–∞: 1500 —Ä—É–±.",
        reply_markup=keyboard
    )

async def order(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üìù –û–ø–∏—à–∏—Ç–µ –≤–∞—à –∑–∞–∫–∞–∑ (—Ç–µ–º—É, —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è, —Å—Ä–æ–∫–∏):",
        reply_markup=keyboard
    )

async def forward_to_admin(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    username = f"@{user.username}" if user.username else user.first_name
    await context.bot.send_message(
        chat_id=ADMIN_CHAT_ID,
        text=f"üì® –ù–æ–≤—ã–π –∑–∞–∫–∞–∑ –æ—Ç {username}:\n\n{update.message.text}"
    )
    await update.message.reply_text("‚úÖ –í–∞—à –∑–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç!", reply_markup=keyboard)

async def error_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    logger.error(f"–û—à–∏–±–∫–∞: {context.error}")
    if update and update.message:
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

def main():
    try:
        application = Application.builder().token(TOKEN).build()
        application.add_handler(CommandHandler("start", start))
        application.add_handler(MessageHandler(filters.Regex('^–¶–µ–Ω—ã$'), prices))
        application.add_handler(MessageHandler(filters.Regex('^–ó–∞–∫–∞–∑$'), order))
        application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND & ~filters.Regex('^(–¶–µ–Ω—ã|–ó–∞–∫–∞–∑)$'), forward_to_admin))
        application.add_error_handler(error_handler)

        if os.getenv('RENDER'):
            logger.info("–ó–∞–ø—É—Å–∫ –≤ —Ä–µ–∂–∏–º–µ webhook –Ω–∞ Render")
            hostname = os.getenv('RENDER_EXTERNAL_HOSTNAME')
            if not hostname:
                logger.error("RENDER_EXTERNAL_HOSTNAME –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
                raise ValueError("RENDER_EXTERNAL_HOSTNAME –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
            application.run_webhook(
                listen="0.0.0.0",
                port=int(os.getenv('PORT', 8443)),
                url_path=TOKEN,
                webhook_url=f"https://{hostname}/{TOKEN}",
                secret_token=os.getenv('WEBHOOK_SECRET', TOKEN)
            )
        else:
            logger.info("–ó–∞–ø—É—Å–∫ –≤ —Ä–µ–∂–∏–º–µ polling")
            application.run_polling(allowed_updates=["message"])

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")
        raise

if __name__ == '__main__':
    main()