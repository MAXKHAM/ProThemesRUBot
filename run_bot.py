#!/usr/bin/env python3
"""
ProThemesRU Telegram Bot - Background Worker
Runs the bot in polling mode for Render worker dyno
"""

import os
import logging
import asyncio
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
from telegram import Update
import json

# Configure logging
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# Bot configuration
BOT_TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')
ADMIN_CHAT_ID = os.getenv('TELEGRAM_ADMIN_CHAT_ID')

def load_templates():
    """Load templates from JSON files"""
    try:
        with open('templates/blocks/premium_templates.json', 'r', encoding='utf-8') as f:
            return json.load(f)
    except FileNotFoundError:
        logger.warning("Templates file not found, using default")
        return {
            "premium_templates": [
                {
                    "id": 1,
                    "name": "–°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π SaaS –õ–µ–Ω–¥–∏–Ω–≥",
                    "category": "saas",
                    "price": 15000,
                    "description": "–ü—Ä–µ–º–∏—É–º –ª–µ–Ω–¥–∏–Ω–≥ –¥–ª—è SaaS –ø—Ä–æ–¥—É–∫—Ç–æ–≤"
                }
            ]
        }

async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle /start command"""
    user = update.effective_user
    welcome_text = f"""
üöÄ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ ProThemesRU, {user.first_name}!

üé® –°–æ–∑–¥–∞–π—Ç–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π —Å–∞–π—Ç –∑–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç!

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:
/start - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
/templates - üìö –®–∞–±–ª–æ–Ω—ã —Å–∞–π—Ç–æ–≤
/blocks - üß± UI –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã  
/styles - üé® –°—Ç–∏–ª–∏ –∏ —ç—Ñ—Ñ–µ–∫—Ç—ã
/constructor - üõ†Ô∏è –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä —Å–∞–π—Ç–æ–≤
/order - üì¶ –ó–∞–∫–∞–∑–∞—Ç—å —Å–∞–π—Ç
/pricing - üí∞ –¶–µ–Ω—ã –∏ —Ç–∞—Ä–∏—Ñ—ã
/help - ‚ùì –ü–æ–º–æ—â—å

üí° –ù–∞—á–Ω–∏—Ç–µ —Å /templates —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≥–æ—Ç–æ–≤—ã–µ —à–∞–±–ª–æ–Ω—ã!
    """
    
    await update.message.reply_text(welcome_text)

async def templates_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle /templates command"""
    templates = load_templates()
    
    response = "üìö **–î–æ—Å—Ç—É–ø–Ω—ã–µ —à–∞–±–ª–æ–Ω—ã:**\n\n"
    
    for template in templates.get('premium_templates', [])[:5]:  # Show first 5
        response += f"üé® **{template['name']}**\n"
        response += f"üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {template['category']}\n"
        response += f"üí∞ –¶–µ–Ω–∞: {template['price']} ‚ÇΩ\n"
        response += f"üìù {template['description']}\n\n"
    
    response += "üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /order –¥–ª—è –∑–∞–∫–∞–∑–∞ —à–∞–±–ª–æ–Ω–∞"
    
    await update.message.reply_text(response, parse_mode='Markdown')

async def blocks_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle /blocks command"""
    response = """üß± **UI –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∏ –±–ª–æ–∫–∏:**

üéØ **–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –±–ª–æ–∫–æ–≤:**
‚Ä¢ üíº –ë–∏–∑–Ω–µ—Å-–±–ª–æ–∫–∏
‚Ä¢ üé® –ü–æ—Ä—Ç—Ñ–æ–ª–∏–æ
‚Ä¢ üõí E-commerce
‚Ä¢ üè¢ –ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–µ
‚Ä¢ üìù –ë–ª–æ–≥
‚Ä¢ üçΩÔ∏è –†–µ—Å—Ç–æ—Ä–∞–Ω—ã
‚Ä¢ üè† –ù–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å
‚Ä¢ üè• –ú–µ–¥–∏—Ü–∏–Ω–∞

üí° **–î–æ—Å—Ç—É–ø–Ω–æ –±–æ–ª–µ–µ 50 –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤!**

üîß –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /constructor –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–∞–π—Ç–∞
üì¶ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /order –¥–ª—è –∑–∞–∫–∞–∑–∞
    """
    
    await update.message.reply_text(response, parse_mode='Markdown')

async def styles_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle /styles command"""
    response = """üé® **–°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Å—Ç–∏–ª–∏ –∏ —ç—Ñ—Ñ–µ–∫—Ç—ã:**

üåà **–ì—Ä–∞–¥–∏–µ–Ω—Ç—ã:**
‚Ä¢ Neon - –ù–µ–æ–Ω–æ–≤—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã
‚Ä¢ Sunset - –ó–∞–∫–∞—Ç–Ω—ã–µ —Ç–æ–Ω–∞
‚Ä¢ Ocean - –ú–æ—Ä—Å–∫–∏–µ –æ—Ç—Ç–µ–Ω–∫–∏
‚Ä¢ Forest - –õ–µ—Å–Ω—ã–µ —Ü–≤–µ—Ç–∞
‚Ä¢ Fire - –û–≥–Ω–µ–Ω–Ω—ã–µ –≥—Ä–∞–¥–∏–µ–Ω—Ç—ã
‚Ä¢ Aurora - –°–µ–≤–µ—Ä–Ω–æ–µ —Å–∏—è–Ω–∏–µ

‚ú® **–≠—Ñ—Ñ–µ–∫—Ç—ã:**
‚Ä¢ Glass - –°—Ç–µ–∫–ª—è–Ω–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
‚Ä¢ Hover - –ê–Ω–∏–º–∞—Ü–∏–∏ –ø—Ä–∏ –Ω–∞–≤–µ–¥–µ–Ω–∏–∏
‚Ä¢ Scroll - –ê–Ω–∏–º–∞—Ü–∏–∏ –ø—Ä–∏ —Å–∫—Ä–æ–ª–ª–µ
‚Ä¢ Loading - –ó–∞–≥—Ä—É–∑–æ—á–Ω—ã–µ –∞–Ω–∏–º–∞—Ü–∏–∏

üéØ **–ö–Ω–æ–ø–∫–∏:**
‚Ä¢ Modern - –°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ
‚Ä¢ Neon - –ù–µ–æ–Ω–æ–≤—ã–µ
‚Ä¢ Glass - –°—Ç–µ–∫–ª—è–Ω–Ω—ã–µ

üí° **30+ –≥–æ—Ç–æ–≤—ã—Ö —Å—Ç–∏–ª–µ–π!**
    """
    
    await update.message.reply_text(response, parse_mode='Markdown')

async def constructor_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle /constructor command"""
    response = """üõ†Ô∏è **–ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä —Å–∞–π—Ç–æ–≤ ProThemesRU**

üéØ **–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:**
‚Ä¢ üé® –í–∏–∑—É–∞–ª—å–Ω—ã–π —Ä–µ–¥–∞–∫—Ç–æ—Ä
‚Ä¢ üß± Drag & Drop –±–ª–æ–∫–∏
‚Ä¢ üì± –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–π –¥–∏–∑–∞–π–Ω
‚Ä¢ ‚ö° –ë—ã—Å—Ç—Ä–∞—è —Å–±–æ—Ä–∫–∞
‚Ä¢ üì§ –≠–∫—Å–ø–æ—Ä—Ç –≤ HTML/CSS

üöÄ **–ù–∞—á–Ω–∏—Ç–µ —Å–æ–∑–¥–∞–Ω–∏–µ:**
1. –í—ã–±–µ—Ä–∏—Ç–µ —à–∞–±–ª–æ–Ω (/templates)
2. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –±–ª–æ–∫–∏ (/blocks)
3. –ü—Ä–∏–º–µ–Ω–∏—Ç–µ —Å—Ç–∏–ª–∏ (/styles)
4. –ó–∞–∫–∞–∂–∏—Ç–µ –≥–æ—Ç–æ–≤—ã–π —Å–∞–π—Ç (/order)

üí° **–°–æ–∑–¥–∞–π—Ç–µ —Å–∞–π—Ç –∑–∞ 10 –º–∏–Ω—É—Ç!**
    """
    
    await update.message.reply_text(response, parse_mode='Markdown')

async def order_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle /order command"""
    response = """üì¶ **–ó–∞–∫–∞–∑–∞—Ç—å —Å–∞–π—Ç**

üéØ **–¢–∞—Ä–∏—Ñ—ã:**
‚Ä¢ üöÄ **–°—Ç–∞—Ä—Ç** - 5,000 ‚ÇΩ
  - –õ–µ–Ω–¥–∏–Ω–≥ —Å—Ç—Ä–∞–Ω–∏—Ü–∞
  - –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–π –¥–∏–∑–∞–π–Ω
  - 3 –¥–Ω—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏

‚Ä¢ üíº **–ë–∏–∑–Ω–µ—Å** - 15,000 ‚ÇΩ
  - –ú–Ω–æ–≥–æ—Å—Ç—Ä–∞–Ω–∏—á–Ω—ã–π —Å–∞–π—Ç
  - CMS —Å–∏—Å—Ç–µ–º–∞
  - SEO –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è
  - 7 –¥–Ω–µ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏

‚Ä¢ ‚≠ê **–ü—Ä–µ–º–∏—É–º** - 25,000 ‚ÇΩ
  - E-commerce —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª
  - –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
  - –ê–Ω–∞–ª–∏—Ç–∏–∫–∞
  - 14 –¥–Ω–µ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏

üìû **–°–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞–º–∏:**
‚Ä¢ Telegram: @ProThemesSupport
‚Ä¢ Email: support@prothemes.ru
‚Ä¢ –°–∞–π—Ç: https://prothemes.ru

üí° –£–∫–∞–∂–∏—Ç–µ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ –∂–µ–ª–∞–µ–º—ã–π —Ç–∞—Ä–∏—Ñ!
    """
    
    await update.message.reply_text(response, parse_mode='Markdown')

async def pricing_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle /pricing command"""
    response = """üí∞ **–¶–µ–Ω—ã –∏ —Ç–∞—Ä–∏—Ñ—ã ProThemesRU**

üéØ **–°–æ–∑–¥–∞–Ω–∏–µ —Å–∞–π—Ç–æ–≤:**
‚Ä¢ üöÄ –õ–µ–Ω–¥–∏–Ω–≥: –æ—Ç 5,000 ‚ÇΩ
‚Ä¢ üíº –ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–π: –æ—Ç 15,000 ‚ÇΩ
‚Ä¢ üõí –ò–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞–≥–∞–∑–∏–Ω: –æ—Ç 25,000 ‚ÇΩ
‚Ä¢ üé® –ü–æ—Ä—Ç—Ñ–æ–ª–∏–æ: –æ—Ç 8,000 ‚ÇΩ

üì¶ **–ì–æ—Ç–æ–≤—ã–µ —à–∞–±–ª–æ–Ω—ã:**
‚Ä¢ üìö –ë–∞–∑–æ–≤—ã–µ: 2,000 ‚ÇΩ
‚Ä¢ ‚≠ê –ü—Ä–µ–º–∏—É–º: 5,000 ‚ÇΩ
‚Ä¢ üèÜ VIP: 10,000 ‚ÇΩ

üîß **–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —É—Å–ª—É–≥–∏:**
‚Ä¢ üì± –ú–æ–±–∏–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è: +2,000 ‚ÇΩ
‚Ä¢ üîç SEO –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è: +3,000 ‚ÇΩ
‚Ä¢ üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞: +1,500 ‚ÇΩ
‚Ä¢ üöÄ –£—Å–∫–æ—Ä–µ–Ω–∏–µ: +50% –∫ —Ü–µ–Ω–µ

üí° **–ê–∫—Ü–∏–∏ –∏ —Å–∫–∏–¥–∫–∏:**
‚Ä¢ üéâ –ü–µ—Ä–≤—ã–π –∑–∞–∫–∞–∑: -20%
‚Ä¢ üë• –û–ø—Ç–æ–º: -15%
‚Ä¢ ‚è∞ –°—Ä–æ—á–Ω–æ: +30%

üìû –ó–∞–∫–∞–∂–∏—Ç–µ —á–µ—Ä–µ–∑ /order
    """
    
    await update.message.reply_text(response, parse_mode='Markdown')

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle /help command"""
    response = """‚ùì **–ü–æ–º–æ—â—å –ø–æ ProThemesRU**

üéØ **–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**
/start - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
/templates - –ü—Ä–æ—Å–º–æ—Ç—Ä —à–∞–±–ª–æ–Ω–æ–≤
/blocks - UI –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
/styles - –°—Ç–∏–ª–∏ –∏ —ç—Ñ—Ñ–µ–∫—Ç—ã
/constructor - –°–æ–∑–¥–∞–Ω–∏–µ —Å–∞–π—Ç–∞
/order - –ó–∞–∫–∞–∑–∞—Ç—å —Å–∞–π—Ç
/pricing - –¶–µ–Ω—ã –∏ —Ç–∞—Ä–∏—Ñ—ã
/help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞

üí° **–ö–∞–∫ —Å–æ–∑–¥–∞—Ç—å —Å–∞–π—Ç:**
1. –í—ã–±–µ—Ä–∏—Ç–µ —à–∞–±–ª–æ–Ω (/templates)
2. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –±–ª–æ–∫–∏ (/blocks)
3. –ü—Ä–∏–º–µ–Ω–∏—Ç–µ —Å—Ç–∏–ª–∏ (/styles)
4. –ó–∞–∫–∞–∂–∏—Ç–µ –≥–æ—Ç–æ–≤—ã–π —Å–∞–π—Ç (/order)

üìû **–ü–æ–¥–¥–µ—Ä–∂–∫–∞:**
‚Ä¢ Telegram: @ProThemesSupport
‚Ä¢ Email: support@prothemes.ru
‚Ä¢ –°–∞–π—Ç: https://prothemes.ru

üöÄ **–ì–æ—Ç–æ–≤—ã —Å–æ–∑–¥–∞—Ç—å —Å–∞–π—Ç? –ù–∞—á–Ω–∏—Ç–µ —Å /start!**
    """
    
    await update.message.reply_text(response, parse_mode='Markdown')

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle regular messages"""
    message_type = update.message.chat.type
    text = update.message.text
    
    logger.info(f'User ({update.message.chat.id}) in {message_type}: "{text}"')
    
    if message_type == 'group':
        if '@ProThemesRUBot' in text:
            new_text = text.replace('@ProThemesRUBot', '').strip()
            response = f'–ü—Ä–∏–≤–µ—Ç! –í—ã –Ω–∞–ø–∏—Å–∞–ª–∏: "{new_text}"'
        else:
            return
    else:
        response = f'–í—ã –Ω–∞–ø–∏—Å–∞–ª–∏: "{text}"\n\nüí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é'
    
    await update.message.reply_text(response)

async def error_handler(update: object, context: ContextTypes.DEFAULT_TYPE):
    """Handle errors"""
    logger.error(f'Exception while handling an update: {context.error}')

async def main():
    """Main function"""
    if not BOT_TOKEN:
        logger.error("BOT_TOKEN not configured!")
        return
    
    # Create application
    application = Application.builder().token(BOT_TOKEN).build()
    
    # Add handlers
    application.add_handler(CommandHandler('start', start_command))
    application.add_handler(CommandHandler('templates', templates_command))
    application.add_handler(CommandHandler('blocks', blocks_command))
    application.add_handler(CommandHandler('styles', styles_command))
    application.add_handler(CommandHandler('constructor', constructor_command))
    application.add_handler(CommandHandler('order', order_command))
    application.add_handler(CommandHandler('pricing', pricing_command))
    application.add_handler(CommandHandler('help', help_command))
    
    # Add message handler
    application.add_handler(MessageHandler(filters.TEXT, handle_message))
    
    # Add error handler
    application.add_error_handler(error_handler)
    
    # Start polling
    logger.info("Starting bot in polling mode...")
    await application.initialize()
    await application.start()
    await application.run_polling(allowed_updates=Update.ALL_TYPES)

if __name__ == '__main__':
    asyncio.run(main()) 