#!/usr/bin/env python3
"""
–£–ª—É—á—à–µ–Ω–Ω—ã–π Telegram Bot ProThemesRU —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π –±–∏–±–ª–∏–æ—Ç–µ–∫–æ–π —à–∞–±–ª–æ–Ω–æ–≤ –∏ –±–ª–æ–∫–æ–≤
"""

import os
import logging
import json
import asyncio
from typing import Dict, List, Optional, Any
from datetime import datetime, timedelta
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, InputMediaPhoto, InputMediaDocument
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    CallbackQueryHandler,
    ContextTypes,
    filters,
    ConversationHandler,
)
from telegram.constants import ParseMode
from dotenv import load_dotenv
import requests
import aiohttp
from PIL import Image
import io

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO,
    handlers=[
        logging.FileHandler('telegram_bot.log'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞
SELECTING_ACTION, TEMPLATES, CUSTOMIZATION, ORDER, PAYMENT, FEEDBACK, BLOCKS, STYLES = range(8)

# –ö–Ω–æ–ø–∫–∏ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
MAIN_MENU = [
    [
        InlineKeyboardButton("üìö –®–∞–±–ª–æ–Ω—ã", callback_data='templates'),
        InlineKeyboardButton("üß± –ë–ª–æ–∫–∏", callback_data='blocks'),
    ],
    [
        InlineKeyboardButton("üé® –°—Ç–∏–ª–∏", callback_data='styles'),
        InlineKeyboardButton("üé® –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä", callback_data='customization'),
    ],
    [
        InlineKeyboardButton("üì¶ –ó–∞–∫–∞–∑–∞—Ç—å", callback_data='order'),
        InlineKeyboardButton("üí∞ –¶–µ–Ω—ã", callback_data='pricing'),
    ],
    [
        InlineKeyboardButton("‚ùì –ü–æ–º–æ—â—å", callback_data='help'),
        InlineKeyboardButton("üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã", callback_data='contacts'),
    ],
]

# API –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
API_BASE_URL = os.getenv('API_BASE_URL', 'http://localhost:5000')
TELEGRAM_TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')
ADMIN_CHAT_ID = os.getenv('TELEGRAM_ADMIN_CHAT_ID')

class EnhancedTemplateManager:
    """–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä —à–∞–±–ª–æ–Ω–æ–≤"""
    
    def __init__(self):
        self.templates = self._load_templates()
        self.categories = self._get_categories()
    
    def _load_templates(self) -> List[Dict]:
        """–ó–∞–≥—Ä—É–∑–∫–∞ —à–∞–±–ª–æ–Ω–æ–≤ –∏–∑ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞"""
        try:
            with open('../templates/blocks/enhanced_templates.json', 'r', encoding='utf-8') as f:
                data = json.load(f)
                return data.get('templates', [])
        except FileNotFoundError:
            logger.warning("–§–∞–π–ª —à–∞–±–ª–æ–Ω–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ–º–æ-–¥–∞–Ω–Ω—ã–µ")
            return self._get_demo_templates()
    
    def _get_categories(self) -> Dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π —à–∞–±–ª–æ–Ω–æ–≤"""
        try:
            with open('../templates/blocks/enhanced_templates.json', 'r', encoding='utf-8') as f:
                data = json.load(f)
                return data.get('categories', {})
        except FileNotFoundError:
            return {}
    
    def _get_demo_templates(self) -> List[Dict]:
        """–î–µ–º–æ-—à–∞–±–ª–æ–Ω—ã"""
        return [
            {
                "id": 1,
                "name": "–°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –±–∏–∑–Ω–µ—Å-–ª–µ–Ω–¥–∏–Ω–≥",
                "category": "business",
                "price": 5000,
                "currency": "‚ÇΩ",
                "features": ["–ê–¥–∞–ø—Ç–∏–≤–Ω—ã–π –¥–∏–∑–∞–π–Ω", "SEO-–æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è", "–§–æ—Ä–º—ã –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏"],
                "description": "–°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –ª–µ–Ω–¥–∏–Ω–≥ –¥–ª—è –±–∏–∑–Ω–µ—Å–∞",
                "preview_image": "https://via.placeholder.com/400x300/4A90E2/FFFFFF?text=–ë–∏–∑–Ω–µ—Å-–ª–µ–Ω–¥–∏–Ω–≥",
                "tags": ["–±–∏–∑–Ω–µ—Å", "–ª–µ–Ω–¥–∏–Ω–≥", "–∞–¥–∞–ø—Ç–∏–≤–Ω—ã–π"]
            }
        ]
    
    def get_templates(self, category: str = None) -> List[Dict]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —à–∞–±–ª–æ–Ω–æ–≤ —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
        if category:
            return [t for t in self.templates if t.get('category') == category]
        return self.templates
    
    def get_template_by_id(self, template_id: int) -> Optional[Dict]:
        return next((t for t in self.templates if t["id"] == template_id), None)
    
    def get_categories(self) -> Dict:
        return self.categories

class BlocksManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä UI –±–ª–æ–∫–æ–≤"""
    
    def __init__(self):
        self.blocks = self._load_blocks()
    
    def _load_blocks(self) -> Dict:
        """–ó–∞–≥—Ä—É–∑–∫–∞ UI –±–ª–æ–∫–æ–≤"""
        try:
            with open('../templates/blocks/ui_components.json', 'r', encoding='utf-8') as f:
                return json.load(f)
        except FileNotFoundError:
            logger.warning("–§–∞–π–ª –±–ª–æ–∫–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return {}
    
    def get_components(self, category: str = None) -> Dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤"""
        if category:
            return self.blocks.get('components', {}).get(category, {})
        return self.blocks.get('components', {})
    
    def get_animations(self) -> Dict:
        return self.blocks.get('animations', {})
    
    def get_color_schemes(self) -> Dict:
        return self.blocks.get('color_schemes', {})
    
    def get_typography(self) -> Dict:
        return self.blocks.get('typography', {})

class StylesManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä —Å—Ç–∏–ª–µ–π"""
    
    def __init__(self):
        self.styles = self._load_styles()
    
    def _load_styles(self) -> Dict:
        """–ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∏–ª–µ–π"""
        try:
            with open('../templates/blocks/styles_library.json', 'r', encoding='utf-8') as f:
                return json.load(f)
        except FileNotFoundError:
            logger.warning("–§–∞–π–ª —Å—Ç–∏–ª–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return {}
    
    def get_gradients(self) -> Dict:
        return self.styles.get('gradients', {})
    
    def get_shadows(self) -> Dict:
        return self.styles.get('shadows', {})
    
    def get_effects(self) -> Dict:
        return self.styles.get('effects', {})
    
    def get_predefined_styles(self) -> Dict:
        return self.styles.get('predefined_styles', {})

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤
template_manager = EnhancedTemplateManager()
blocks_manager = BlocksManager()
styles_manager = StylesManager()

class UserManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    
    def __init__(self):
        self.users = {}
    
    def add_user(self, user_id: int, user_data: Dict):
        self.users[user_id] = {
            "id": user_id,
            "created_at": datetime.now(),
            "last_activity": datetime.now(),
            "selected_template": None,
            "customization_data": {},
            "orders": [],
            **user_data
        }
    
    def get_user(self, user_id: int) -> Optional[Dict]:
        return self.users.get(user_id)
    
    def update_user(self, user_id: int, data: Dict):
        if user_id in self.users:
            self.users[user_id].update(data)
            self.users[user_id]["last_activity"] = datetime.now()
    
    def get_user_stats(self) -> Dict:
        total_users = len(self.users)
        active_users = len([u for u in self.users.values() 
                          if (datetime.now() - u["last_activity"]).days < 7])
        return {"total": total_users, "active": active_users}

user_manager = UserManager()

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ù–∞—á–∞–ª–æ –¥–∏–∞–ª–æ–≥–∞"""
    user = update.effective_user
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_manager.add_user(user.id, {
        "first_name": user.first_name,
        "last_name": user.last_name,
        "username": user.username
    })
    
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.first_name} (ID: {user.id}) –Ω–∞—á–∞–ª –¥–∏–∞–ª–æ–≥")
    
    reply_markup = InlineKeyboardMarkup(MAIN_MENU)
    await update.message.reply_text(
        f"–ü—Ä–∏–≤–µ—Ç, {user.first_name}! üåü\n\n"
        "–Ø –ø–æ–º–æ–≥—É –≤–∞–º —Å–æ–∑–¥–∞—Ç—å –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π —Å–∞–π—Ç.\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=reply_markup
    )
    return SELECTING_ACTION

async def show_templates(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü–æ–∫–∞–∑–∞—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ —à–∞–±–ª–æ–Ω—ã"""
    query = update.callback_query
    await query.answer()
    
    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    categories = template_manager.get_categories()
    keyboard = []
    
    for cat_id, cat_info in categories.items():
        keyboard.append([InlineKeyboardButton(
            f"{cat_info.get('icon', 'üìÅ')} {cat_info.get('name', cat_id)}", 
            callback_data=f'category_{cat_id}'
        )])
    
    keyboard.append([InlineKeyboardButton("üîô –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='back_to_main')])
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.message.reply_text(
        "üìö <b>–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —à–∞–±–ª–æ–Ω–æ–≤:</b>\n\n"
        "–£ –Ω–∞—Å –µ—Å—Ç—å —à–∞–±–ª–æ–Ω—ã –¥–ª—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤ —Å–∞–π—Ç–æ–≤:",
        reply_markup=reply_markup,
        parse_mode=ParseMode.HTML
    )
    return TEMPLATES

async def show_category_templates(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü–æ–∫–∞–∑–∞—Ç—å —à–∞–±–ª–æ–Ω—ã –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    query = update.callback_query
    await query.answer()
    
    category = query.data.split('_')[1]
    templates = template_manager.get_templates(category)
    
    if not templates:
        await query.message.reply_text("‚ùå –®–∞–±–ª–æ–Ω—ã –≤ —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        return TEMPLATES
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3 —à–∞–±–ª–æ–Ω–∞
    for template in templates[:3]:
        keyboard = [
            [
                InlineKeyboardButton("üëÅÔ∏è –ü—Ä–æ—Å–º–æ—Ç—Ä", callback_data=f'view_{template["id"]}'),
                InlineKeyboardButton("‚úÖ –í—ã–±—Ä–∞—Ç—å", callback_data=f'select_{template["id"]}'),
            ],
            [
                InlineKeyboardButton(f"üí∞ {template['price']}{template['currency']}", callback_data=f'price_{template["id"]}'),
            ]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        caption = (
            f"üé® <b>{template['name']}</b>\n"
            f"üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {template.get('category', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}\n"
            f"‚ú® –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏: {', '.join(template['features'][:3])}\n"
            f"üíµ –¶–µ–Ω–∞: {template['price']}{template['currency']}\n\n"
            f"üìù {template['description']}"
        )
        
        await query.message.reply_photo(
            photo=template["preview_image"],
            caption=caption,
            reply_markup=reply_markup,
            parse_mode=ParseMode.HTML
        )
    
    keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º", callback_data='templates')]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.message.reply_text(
        "–ü–æ–∫–∞–∑–∞–Ω—ã –ø–µ—Ä–≤—ã–µ 3 —à–∞–±–ª–æ–Ω–∞ –∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏. –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π!",
        reply_markup=reply_markup
    )
    
    return TEMPLATES

async def show_blocks(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü–æ–∫–∞–∑–∞—Ç—å UI –±–ª–æ–∫–∏"""
    query = update.callback_query
    await query.answer()
    
    components = blocks_manager.get_components()
    keyboard = []
    
    for component_type in components.keys():
        keyboard.append([InlineKeyboardButton(
            f"üß± {component_type.title()}", 
            callback_data=f'blocks_{component_type}'
        )])
    
    keyboard.append([InlineKeyboardButton("üîô –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='back_to_main')])
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.message.reply_text(
        "üß± <b>UI –ë–ª–æ–∫–∏ –∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:",
        reply_markup=reply_markup,
        parse_mode=ParseMode.HTML
    )
    return BLOCKS

async def show_block_category(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü–æ–∫–∞–∑–∞—Ç—å –±–ª–æ–∫–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    query = update.callback_query
    await query.answer()
    
    category = query.data.split('_')[1]
    components = blocks_manager.get_components(category)
    
    if not components:
        await query.message.reply_text("‚ùå –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        return BLOCKS
    
    message_text = f"üß± <b>{category.title()}</b>\n\n"
    
    for comp_id, comp_info in components.items():
        message_text += f"<b>{comp_info.get('name', comp_id)}</b>\n"
        message_text += f"HTML: <code>{comp_info.get('html', '–ù–µ —É–∫–∞–∑–∞–Ω')}</code>\n\n"
    
    keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ –±–ª–æ–∫–∞–º", callback_data='blocks')]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.message.reply_text(
        message_text,
        reply_markup=reply_markup,
        parse_mode=ParseMode.HTML
    )
    
    return BLOCKS

async def show_styles(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∏–ª–∏ –∏ —ç—Ñ—Ñ–µ–∫—Ç—ã"""
    query = update.callback_query
    await query.answer()
    
    keyboard = [
        [InlineKeyboardButton("üåà –ì—Ä–∞–¥–∏–µ–Ω—Ç—ã", callback_data='styles_gradients')],
        [InlineKeyboardButton("üå´Ô∏è –¢–µ–Ω–∏", callback_data='styles_shadows')],
        [InlineKeyboardButton("‚ú® –≠—Ñ—Ñ–µ–∫—Ç—ã", callback_data='styles_effects')],
        [InlineKeyboardButton("üé® –ì–æ—Ç–æ–≤—ã–µ —Å—Ç–∏–ª–∏", callback_data='styles_predefined')],
        [InlineKeyboardButton("üîô –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='back_to_main')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.message.reply_text(
        "üé® <b>–°—Ç–∏–ª–∏ –∏ —ç—Ñ—Ñ–µ–∫—Ç—ã</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Å—Ç–∏–ª–µ–π –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:",
        reply_markup=reply_markup,
        parse_mode=ParseMode.HTML
    )
    return STYLES

async def show_style_category(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∏–ª–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    query = update.callback_query
    await query.answer()
    
    category = query.data.split('_')[1]
    
    if category == 'gradients':
        styles = styles_manager.get_gradients()
        icon = "üåà"
    elif category == 'shadows':
        styles = styles_manager.get_shadows()
        icon = "üå´Ô∏è"
    elif category == 'effects':
        styles = styles_manager.get_effects()
        icon = "‚ú®"
    elif category == 'predefined':
        styles = styles_manager.get_predefined_styles()
        icon = "üé®"
    else:
        styles = {}
        icon = "üìÅ"
    
    if not styles:
        await query.message.reply_text("‚ùå –°—Ç–∏–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        return STYLES
    
    message_text = f"{icon} <b>{category.title()}</b>\n\n"
    
    for style_id, style_info in styles.items():
        message_text += f"<b>{style_info.get('name', style_id)}</b>\n"
        message_text += f"CSS: <code>{style_info.get('css', '–ù–µ —É–∫–∞–∑–∞–Ω')}</code>\n\n"
    
    keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ —Å—Ç–∏–ª—è–º", callback_data='styles')]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.message.reply_text(
        message_text,
        reply_markup=reply_markup,
        parse_mode=ParseMode.HTML
    )
    
    return STYLES

async def back_to_main(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    query = update.callback_query
    await query.answer()
    
    reply_markup = InlineKeyboardMarkup(MAIN_MENU)
    await query.message.reply_text(
        "üè† <b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=reply_markup,
        parse_mode=ParseMode.HTML
    )
    return SELECTING_ACTION

async def error_handler(update: object, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫"""
    logger.error(msg="–û—à–∏–±–∫–∞:", exc_info=context.error)
    
    if isinstance(update, Update):
        await update.effective_message.reply_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É."
        )

def main() -> None:
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    if not TELEGRAM_TOKEN:
        logger.error("TELEGRAM_BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
        return
    
    application = Application.builder().token(TELEGRAM_TOKEN).build()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            SELECTING_ACTION: [
                CallbackQueryHandler(show_templates, pattern='^templates$'),
                CallbackQueryHandler(show_blocks, pattern='^blocks$'),
                CallbackQueryHandler(show_styles, pattern='^styles$'),
                CallbackQueryHandler(back_to_main, pattern='^back_to_main$'),
            ],
            TEMPLATES: [
                CallbackQueryHandler(show_category_templates, pattern='^category_'),
                CallbackQueryHandler(show_templates, pattern='^templates$'),
                CallbackQueryHandler(back_to_main, pattern='^back_to_main$'),
            ],
            BLOCKS: [
                CallbackQueryHandler(show_block_category, pattern='^blocks_'),
                CallbackQueryHandler(show_blocks, pattern='^blocks$'),
                CallbackQueryHandler(back_to_main, pattern='^back_to_main$'),
            ],
            STYLES: [
                CallbackQueryHandler(show_style_category, pattern='^styles_'),
                CallbackQueryHandler(show_styles, pattern='^styles$'),
                CallbackQueryHandler(back_to_main, pattern='^back_to_main$'),
            ],
        },
        fallbacks=[CommandHandler("start", start)],
    )
    
    application.add_handler(conv_handler)
    application.add_error_handler(error_handler)
    
    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    logger.info("–ó–∞–ø—É—Å–∫ —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ —Ç–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç–∞...")
    application.run_polling(allowed_updates=Update.ALL_TYPES)

if __name__ == '__main__':
    main() 